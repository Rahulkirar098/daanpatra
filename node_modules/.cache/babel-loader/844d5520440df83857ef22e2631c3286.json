{"ast":null,"code":"import * as conf from \"./Config\";\n\nclass ApiHandler {}\n\nconst getResult = (url, method = \"GET\", data = null, success = () => {}, failed = () => {}) => {\n  let parameters = {};\n  parameters.method = method;\n\n  if (data) {\n    parameters.body = data;\n  }\n\n  parameters.headers = {\n    \"Content-Type\": \"application/json\" // Accept: x \"application/json\",\n\n  };\n\n  try {\n    fetch(conf.apiUrl + url, parameters).then(response => response.json()).then(res => {\n      success(res);\n    }).catch(error => {\n      failed(error);\n    });\n  } catch (error) {\n    failed(error);\n  }\n};\n\nexport const otpGenerate = (phoneNo, success = response => {}, failed = error => {}) => {\n  if (!phoneNo) {\n    failed(\"not found\");\n    return;\n  }\n\n  getResult(\"/otp/\", \"POST\", JSON.stringify({\n    username: phoneNo\n  }), response => {\n    if (response.status === 200) {\n      success(response);\n    } else {\n      failed(response);\n    }\n  });\n};\nexport const signin = (phoneNo, otp, success = () => {}, failed = () => {}) => {\n  if (!otp || !phoneNo) return;\n  getResult(\"/login/\", \"POST\", JSON.stringify({\n    username: phoneNo,\n    password: otp\n  }), response => {\n    success(response);\n  });\n};\nexport const signup = (fname, lname, phoneNo, success = () => {}) => {\n  if (!fname || !lname || !phoneNo) return;\n  getResult(\"/user-register/\", \"POST\", JSON.stringify({\n    contact: phoneNo,\n    username: phoneNo,\n    first_name: fname,\n    last_name: lname\n  }), response => {\n    success(response);\n  });\n};\nexport default ApiHandler;","map":{"version":3,"sources":["/home/rahul/Documents/daanpatra/src/config/ApiHandler.js"],"names":["conf","ApiHandler","getResult","url","method","data","success","failed","parameters","body","headers","fetch","apiUrl","then","response","json","res","catch","error","otpGenerate","phoneNo","JSON","stringify","username","status","signin","otp","password","signup","fname","lname","contact","first_name","last_name"],"mappings":"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","sourcesContent":["import * as conf from \"./Config\";\r\n\r\nclass ApiHandler {}\r\nconst getResult = (\r\n  url,\r\n  method = \"GET\",\r\n  data = null,\r\n  success = () => {},\r\n  failed = () => {}\r\n) => {\r\n  let parameters = {};\r\n  parameters.method = method;\r\n  if (data) {\r\n    parameters.body = data;\r\n  }\r\n  parameters.headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    // Accept: x \"application/json\",\r\n  };\r\n  try {\r\n    fetch(conf.apiUrl + url, parameters)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        success(res);\r\n      })\r\n      .catch((error) => {\r\n        failed(error);\r\n      });\r\n  } catch (error) {\r\n    failed(error);\r\n  }\r\n};\r\n\r\nexport const otpGenerate = (\r\n  phoneNo,\r\n  success = (response) => {},\r\n  failed = (error) => {}\r\n) => {\r\n  if (!phoneNo) {\r\n    failed(\"not found\");\r\n    return;\r\n  }\r\n  getResult(\r\n    \"/otp/\",\r\n    \"POST\",\r\n    JSON.stringify({ username: phoneNo }),\r\n    (response) => {\r\n      if (response.status === 200) {\r\n        success(response);\r\n      } else {\r\n        failed(response);\r\n      }\r\n    }\r\n  );\r\n};\r\nexport const signin = (phoneNo, otp, success = () => {}, failed = () => {}) => {\r\n  if (!otp || !phoneNo) return;\r\n  getResult(\r\n    \"/login/\",\r\n    \"POST\",\r\n    JSON.stringify({ username: phoneNo, password: otp }),\r\n    (response) => {\r\n      success(response);\r\n    }\r\n  );\r\n};\r\nexport const signup = (fname, lname, phoneNo, success = () => {}) => {\r\n  if (!fname || !lname || !phoneNo) return;\r\n  getResult(\r\n    \"/user-register/\",\r\n    \"POST\",\r\n    JSON.stringify({\r\n      contact: phoneNo,\r\n      username: phoneNo,\r\n      first_name: fname,\r\n      last_name: lname,\r\n    }),\r\n    (response) => {\r\n      success(response);\r\n    }\r\n  );\r\n};\r\nexport default ApiHandler;\r\n"]},"metadata":{},"sourceType":"module"}